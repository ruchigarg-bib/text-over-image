var SLDS="object"==typeof SLDS?SLDS:{};SLDS["__internal/chunked/docs/ui/components/dueling-picklist/docs.mdx.js"]=function(e){function t(t){for(var a,n,o=t[0],c=t[1],r=t[2],m=0,u=[];m<o.length;m++)n=o[m],l[n]&&u.push(l[n][0]),l[n]=0;for(a in c)Object.prototype.hasOwnProperty.call(c,a)&&(e[a]=c[a]);for(d&&d(t);u.length;)u.shift()();return s.push.apply(s,r||[]),i()}function i(){for(var e,t=0;t<s.length;t++){for(var i=s[t],a=!0,o=1;o<i.length;o++){var c=i[o];0!==l[c]&&(a=!1)}a&&(s.splice(t--,1),e=n(n.s=i[0]))}return e}var a={},l={31:0},s=[];function n(t){if(a[t])return a[t].exports;var i=a[t]={i:t,l:!1,exports:{}};return e[t].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=a,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(i,a,function(t){return e[t]}.bind(null,a));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/assets/scripts/bundle/";var o=this.webpackJsonpSLDS___internal_chunked_docs=this.webpackJsonpSLDS___internal_chunked_docs||[],c=o.push.bind(o);o.push=t,o=o.slice();for(var r=0;r<o.length;r++)t(o[r]);var d=c;return s.push([209,0]),i()}({0:function(e,t){e.exports=React},18:function(e,t){e.exports=JSBeautify},19:function(e,t){e.exports=ReactDOM},209:function(e,t,i){"use strict";i.r(t),i.d(t,"getElement",function(){return O}),i.d(t,"getContents",function(){return v});var a=i(0),l=i(3),s=i(1),n=i(23),o=i(9),c=i(16),r=i(34),d=(i(81),l.c.a),m=l.c.code,u=l.c.em,h=l.c.h2,b=l.c.h3,p=l.c.h4,g=l.c.li,j=l.c.p,f=l.c.ul,O=function(){return Object(a.createElement)(l.b,{},Object(a.createElement)("div",{className:"doc lead"},"A dueling-picklist is used to move options between two lists and is often referred to as a multi-select. Sometimes, the list options can then be re-ordered, depending on the use case."),Object(a.createElement)(s.a,{exampleOnly:!0},Object(a.createElement)(r.j,{dataSet:r.m,noReorder:!0})),h({id:"About-Dueling-Picklist"},"About Dueling-Picklist"),b({id:"Accessibility"},"Accessibility"),j({},"This component is essentially 2 ARIA listboxes side by side, so we follow the ",d({href:"https://www.w3.org/TR/wai-aria-practices/#Listbox"},"ARIA practices guide")," to help implement their interaction in an accessible way. Some additional details, supplementary to the ARIA guide include:"),p({id:"Markup"},"Markup"),f({},g({},m({},'aria-multiselectable="true"')," should be set on each listbox"),g({},m({},"aria-selected")," should be placed on each ",m({},'role="option"'),", and set to ",m({},"false")," by default"),g({},m({},"aria-labelledby")," is used to identify the list to the user and should point to the list label"),g({},m({},"aria-describedby")," is used to provide operation instructions for the Drag and Drop interaction"),g({},m({},"tabindex"),' should be set to "0" when an item is selected and "-1" otherwise')),p({id:"Focus-Management"},"Focus Management"),f({},g({},"Initially, nothing should be selected and the first item in each list should have ",m({},'tabindex="0"')),g({},"When an item is focused, it becomes selected"),g({},"When focus leaves the list, the last selected item remains selected and focusable. When focus returns to the list focus is placed on the last selected item."),g({},"When moving items:",f({},g({},"With the move button: the items are unselected and added to the target list. The focus should remain on the move button."),g({},"With a keyboard shortcut: focus remains on the item, but in the target list. Since the item is focused, it is also selected."),g({},"If there are already selected items in the target list, they stay selected and the new items are added below them.")))),p({id:"Keyboard-Interactions"},"Keyboard Interactions"),f({},g({},"Each list has a single focusable option inside. There is only ever one focusable option per list and it is expected that a user will use their arrow keys, and some modifier keys, to perform all actions."),g({},"Because we support drag and drop re-ordering within a list, we implement the second multi-select keyboard model.",f({},g({},m({},"up")," and ",m({},"down")," arrows move focus ",u({},"and")," selection, with ",m({},'aria-selected="true"'),". Any previously selected items are deselected."),g({},m({},"shift + up")," and ",m({},"shift + down")," move focus and creates addition selections"),g({},m({},"ctrl + down")," or ",m({},"ctrl + up")," moves focus but selection remains where it is"),g({},m({},"ctrl + space")," toggles selection on the focused option, in addition to previous selections"),g({},m({},"ctrl + a")," selects all options in the list"),g({},m({},"cmd/ctrl + right")," and ",m({},"cmd/ctrl + left")," Moves selected items between lists"),g({},m({},"space"),' toggles "Drag and Drop" mode. When in "Drag and Drop" mode:',f({},g({},m({},"up")," and ",m({},"down")," arrows move the selected items ",u({},"within")," the current list")))))),h({id:"Base"},"Base"),Object(a.createElement)(o.a,{title:"Dueling Picklist with Reorder"},Object(a.createElement)(r.j,{dataSet:r.b})),h({id:"Group-Label"},"Group Label"),j({},"A Dueling Picklist should have a group label, similar to using a ",m({},"fieldset")," and ",m({},"legend")," on grouped form controls. To achieve this, wrap the Dueling Picklist in an ",m({},"slds-form-element")," and add a ",m({},"div")," with the same class names that are applied to a ",m({},"legend")," element in a fieldset, ",m({},"slds-form-element__label slds-form-element__legend"),"."),j({},Object(a.createElement)(c.a,{header:"Labeling the group",type:"a11y"},"It is important that the ",m({},"slds-form-element")," ",m({},"<div>")," has the ",m({},'role="group"')," attribute applied, along with ",m({},"aria-labelledby"),", whose value is the ID of the visible group label.")),Object(a.createElement)(o.a,{title:"Dueling Picklist With Group Label"},Object(a.createElement)(s.a,null,Object(a.createElement)(r.j,{dataSet:r.b}))),h({id:"Responsive"},"Responsive"),j({},"To make the dueling picklist responsive or use it within narrow regions, apply the class ",m({},"slds-dueling-picklist__column_responsive")," to the ",m({},"<div>"),"s with class ",m({},"slds-dueling-picklist__column")," that contain options (not the columns that only contain buttons). Any items longer than the space available will truncate with ellipses."),Object(a.createElement)(o.a,{title:"Dueling Picklist Responsive"},Object(a.createElement)(s.a,null,Object(a.createElement)(r.j,{dataSet:r.a,noReorder:!0,isResponsive:!0}))),j({},Object(a.createElement)(c.a,{header:"Adjusting Height",type:"note"},"To adjust the height of the listboxes, set the height using an inline style on ",u({},"both")," of the ",m({},"<div>"),"s with class ",m({},"slds-dueling-picklist__column"),". If you are setting it based on a maximum number of items being shown before scrolling, you can set ",m({},"height = (2.25rem * numItems) + 1rem"),".")),j({},Object(a.createElement)(n.a,{toggleCode:!1},Object(a.createElement)("div",{className:"slds-dueling-list"},Object(a.createElement)("div",{className:"slds-dueling-list__column"},Object(a.createElement)("span",{className:"slds-form-element__label",id:"label-1"},"Available Languages"),Object(a.createElement)("div",{className:"slds-dueling-list__options",style:{height:"10rem"}},"{...}")),Object(a.createElement)("div",{className:"slds-dueling-list__column"},"{...}"),Object(a.createElement)("div",{className:"slds-dueling-list__column"},Object(a.createElement)("span",{className:"slds-form-element__label",id:"label-2"},"Selected Languages"),Object(a.createElement)("div",{className:"slds-dueling-list__options",style:{height:"10rem"}},"{...}"))))),h({id:"Edit-Mode"},"Edit Mode"),j({},"If the user needs to select multiple options for a field, like a list of languages supported, then use a dueling picklist without the re-order arrows on the right."),j({},Object(a.createElement)(c.a,{header:"Helpful Assistive Text",type:"a11y"},"The assistive text content in the ",m({},"option-drag-label")," ",m({},"<div>")," should provide clear instructions on how to drag and drop with a keyboard.")),Object(a.createElement)(o.a,{title:"Dueling Picklist"},Object(a.createElement)(s.a,null,Object(a.createElement)(r.j,{dataSet:r.a,noReorder:!0}))),b({id:"Selected-Item"},"Selected Item"),Object(a.createElement)(c.a,{header:"Aria Selected",type:"a11y"},Object(a.createElement)("code",{className:"doc"},"aria-selected")," should be placed on each ",Object(a.createElement)("code",{className:"doc"},'role="option"'),", and set to ",Object(a.createElement)("code",{className:"doc"},"true")," when the item is selected."),Object(a.createElement)(o.a,{title:"Dueling Picklist with Item Selected"},Object(a.createElement)(s.a,null,Object(a.createElement)(r.j,{dataSet:r.m,noReorder:!0}))),b({id:"Multiple-Selected-Items"},"Multiple Selected Items"),Object(a.createElement)(o.a,{title:"Dueling Picklist with Multiple Items Selected"},Object(a.createElement)(s.a,null,Object(a.createElement)(r.j,{dataSet:r.l,noReorder:!0}))),b({id:"Dropped-Items"},"Dropped Items"),j({},Object(a.createElement)(c.a,{type:"a11y",header:"Aria Live"},"The ",m({},"drag-live-region")," ",m({},"<div>")," with ",m({},'aria-live="assertive"')," should update as items are moved to provide context about the state and location of the items.")),Object(a.createElement)(n.a,{toggleCode:!1},Object(a.createElement)("div",{className:"slds-dueling-list"},Object(a.createElement)("div",{className:"slds-assistive-text",id:"drag-live-region","aria-live":"assertive"},"Arabic and German: Moved to Selected Languages."))),Object(a.createElement)(o.a,{title:"Dueling Picklist with Items Dropped"},Object(a.createElement)(s.a,null,Object(a.createElement)(r.j,{dataSet:r.e,noReorder:!0}))),b({id:"Locked-Items"},"Locked Items"),j({},"If items are not able to be removed or reordered from the selected list, a lock icon appears next to the item name."),Object(a.createElement)(c.a,{type:"a11y",header:"Aria Disabled and Assistive Text"},"For each locked item, ",Object(a.createElement)("code",{className:"doc"},'aria-disabled="true"')," must be applied to ",Object(a.createElement)("code",{className:"doc"},".slds-listbox__option")," and assistive text (",Object(a.createElement)("code",{className:"doc"},".slds-assistive-text"),") must be added to ",Object(a.createElement)("code",{className:"doc"},".slds-icon_container"),"."),Object(a.createElement)(o.a,{title:"Dueling Picklist with a Locked Item"},Object(a.createElement)(s.a,null,Object(a.createElement)(r.j,{dataSet:r.h,noReorder:!0}))),b({id:"With-Reordering"},"With Reordering"),j({},"If the order of the selected options matters, include the vertical arrows to the right. This allows the user to reorder the second listbox of options."),Object(a.createElement)(o.a,{title:"Dueling Picklist with Reoder Active"},Object(a.createElement)(s.a,null,Object(a.createElement)(r.j,{dataSet:r.b}))),j({},"The following examples show the process of selecting an item, moving it within a list, and dropping it in a final position."),j({},Object(a.createElement)(c.a,{type:"a11y",header:"Aria Live"},"Pay attention to the ",m({},"drag-live-region")," ",m({},"<div>")," with ",m({},'aria-live="assertive"'),". This should update as items are moved to provide context about the state and location of the items at all times.")),p({id:"Item-Selected"},"Item Selected"),Object(a.createElement)(o.a,{title:"Dueling Picklist with Reoder Active Item Selected"},Object(a.createElement)(s.a,null,Object(a.createElement)(r.j,{dataSet:r.n}))),p({id:"Item-Grabbed"},"Item Grabbed"),j({},"Within a list, users are able to drag and drop an item."),Object(a.createElement)(o.a,{title:"Dueling Picklist with Reoder Active Item Grabbed"},Object(a.createElement)(s.a,null,Object(a.createElement)(r.j,{dataSet:r.g}))),p({id:"Item-Moved-Within-a-List"},"Item Moved Within a List"),Object(a.createElement)(o.a,{title:"Dueling Picklist with Reoder Active Item Moved within List"},Object(a.createElement)(s.a,null,Object(a.createElement)(r.j,{dataSet:r.i}))),p({id:"Item-Dropped-in-a-List"},"Item Dropped in a List"),Object(a.createElement)(o.a,{title:"Dueling Picklist with Reoder Active Item Dropped"},Object(a.createElement)(s.a,null,Object(a.createElement)(r.j,{dataSet:r.f}))),b({id:"Disabled"},"Disabled"),j({},"If the user is not able to interact with the dueling picklist, then it should be marked as disabled."),Object(a.createElement)(c.a,{type:"a11y",header:"Aria Disabled"},"In disabled mode, both list boxes ",Object(a.createElement)("code",{className:"doc"},"ul[role=listbox]")," should receive ",Object(a.createElement)("code",{className:"doc"},'aria-disabled="true"'),", and all directional buttons should receive the ",Object(a.createElement)("code",{className:"doc"},"disabled")," attribute."),Object(a.createElement)(c.a,{type:"note",header:"Utility Class"},"The class ",Object(a.createElement)("code",{className:"doc"},"slds-is-disabled")," should also be applied to the divs with the class ",Object(a.createElement)("code",{className:"doc"},"slds-dueling-list_options"),"."),Object(a.createElement)(o.a,{title:"Dueling Picklist Disabled"},Object(a.createElement)(s.a,null,Object(a.createElement)(r.j,{dataSet:r.d,disabled:!0}))),b({id:"Required"},"Required"),Object(a.createElement)(o.a,{title:"Dueling Picklist with Required Indicator"},Object(a.createElement)(s.a,null,Object(a.createElement)(r.j,{dataSet:r.b,isRequired:!0}))),b({id:"With-Tooltip"},"With Tooltip"),j({},"If some contextual information regarding the dueling picklist is needed, add a tooltip next to the group label."),Object(a.createElement)(o.a,{title:"Dueling Picklist with Tooltip"},Object(a.createElement)(s.a,null,Object(a.createElement)(r.c,null,Object(a.createElement)(r.j,{dataSet:r.b,hasTooltip:!0,showTooltip:!0})))),b({id:"Required-With-Tooltip"},"Required With Tooltip"),Object(a.createElement)(o.a,{title:"Dueling Picklist with Required Indicator and Tooltip"},Object(a.createElement)(s.a,null,Object(a.createElement)(r.c,null,Object(a.createElement)(r.j,{dataSet:r.b,isRequired:!0,hasTooltip:!0,showTooltip:!0})))),h({id:"View-Mode"},"View Mode"),j({},"When the user is done selecting options, or is in view mode of the field, they are presented with a comma separated list."),Object(a.createElement)(o.a,{title:"Dueling Picklist in View Mode"},Object(a.createElement)(s.a,null,Object(a.createElement)(r.k,null))))},v=function(){return Object(l.a)(O())}}});